{"version":3,"sources":["ember-orbit.js","ember-orbit/fields/attr.js","ember-orbit/fields/has-many.js","ember-orbit/fields/has-one.js","ember-orbit/fields/key.js","ember-orbit/links/has-many-array.js","ember-orbit/links/has-one-object.js","ember-orbit/links/link-proxy-mixin.js","ember-orbit/main.js","ember-orbit/model.js","ember-orbit/record-array-manager.js","ember-orbit/record-arrays/filtered-record-array.js","ember-orbit/record-arrays/record-array.js","ember-orbit/schema.js","ember-orbit/source.js","ember-orbit/store.js"],"sourcesContent":["define('ember-orbit', ['exports', 'ember-orbit/main', 'ember-orbit/store', 'ember-orbit/model', 'ember-orbit/record-array-manager', 'ember-orbit/schema', 'ember-orbit/source', 'ember-orbit/fields/key', 'ember-orbit/fields/attr', 'ember-orbit/fields/has-many', 'ember-orbit/fields/has-one', 'ember-orbit/links/has-many-array', 'ember-orbit/links/has-one-object', 'ember-orbit/links/link-proxy-mixin', 'ember-orbit/record-arrays/filtered-record-array', 'ember-orbit/record-arrays/record-array'], function (exports, EO, Store, Model, RecordArrayManager, Schema, Source, key, attr, hasMany, hasOne, HasManyArray, HasOneObject, LinkProxyMixin, FilteredRecordArray, RecordArray) {\n\n\t'use strict';\n\n\tEO['default'].Store = Store['default'];\n\tEO['default'].Model = Model['default'];\n\tEO['default'].RecordArrayManager = RecordArrayManager['default'];\n\tEO['default'].Schema = Schema['default'];\n\tEO['default'].Source = Source['default'];\n\tEO['default'].key = key['default'];\n\tEO['default'].attr = attr['default'];\n\tEO['default'].hasOne = hasOne['default'];\n\tEO['default'].hasMany = hasMany['default'];\n\tEO['default'].HasManyArray = HasManyArray['default'];\n\tEO['default'].HasOneObject = HasOneObject['default'];\n\tEO['default'].LinkProxyMixin = LinkProxyMixin['default'];\n\tEO['default'].FilteredRecordArray = FilteredRecordArray['default'];\n\tEO['default'].RecordArray = RecordArray['default'];\n\n\texports['default'] = EO['default'];\n\n});","define('ember-orbit/fields/attr', ['exports'], function (exports) {\n\n  'use strict';\n\n  /**\n   @module ember-orbit\n   */\n\n  var attr = function(type, options) {\n    options = options || {};\n    options.type = type;\n\n    var meta = {\n      options: options,\n      isAttribute: true\n    };\n\n    return Ember.computed(function(key, value) {\n      if (arguments.length > 1) {\n        var oldValue = this.getAttribute(key);\n\n        if (value !== oldValue) {\n          this.patch(key, value);\n        }\n\n        return value;\n\n      } else {\n        return this.getAttribute(key);\n      }\n    }).meta(meta);\n  };\n\n  exports['default'] = attr;\n\n});","define('ember-orbit/fields/has-many', ['exports'], function (exports) {\n\n  'use strict';\n\n  /**\n   @module ember-orbit\n   */\n\n  var hasMany = function(model, options) {\n    options = options || {};\n    options.type = 'hasMany';\n    options.model = model;\n\n    var meta = {\n      options: options,\n      isLink: true\n    };\n\n    return Ember.computed(function(key) {\n      return this.getLinks(key);\n    }).meta(meta).readOnly();\n  };\n\n  exports['default'] = hasMany;\n\n});","define('ember-orbit/fields/has-one', ['exports'], function (exports) {\n\n  'use strict';\n\n  /**\n   @module ember-orbit\n   */\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var hasOne = function(model, options) {\n    options = options || {};\n    options.type = 'hasOne';\n    options.model = model;\n\n    var meta = {\n      options: options,\n      isLink: true\n    };\n\n    return Ember.computed(function(key, value) {\n      var proxy = this.getLink(key);\n\n      if (arguments.length > 1) {\n        var currentValue = get(proxy, 'content');\n\n        if (value === null) {\n          value = undefined;\n        }\n\n        if (currentValue !== value) {\n          if (value === undefined) {\n            this.removeLink(key, currentValue);\n          } else {\n            this.addLink(key, value);\n          }\n          set(proxy, 'content', value);\n        }\n      }\n\n      return proxy;\n\n    }).meta(meta);\n  };\n\n  exports['default'] = hasOne;\n\n});","define('ember-orbit/fields/key', ['exports'], function (exports) {\n\n  'use strict';\n\n  /**\n   @module ember-orbit\n   */\n\n  var key = function(type, options) {\n    if (arguments.length === 1 && typeof type === 'object') {\n      options = type;\n      type = null; // use default below\n    }\n\n    options = options || {};\n    options.type = type || 'string';\n\n    var meta = {\n      options: options,\n      isKey: true\n    };\n\n    return Ember.computed(function(name, value) {\n      if (arguments.length > 1) {\n        var oldValue = this.getKey(name);\n\n        if (value !== oldValue) {\n          this.patch(name, value);\n        }\n\n        return value;\n\n      } else {\n        return this.getKey(name);\n      }\n    }).meta(meta);\n  };\n\n  exports['default'] = key;\n\n});","define('ember-orbit/links/has-many-array', ['exports', 'ember-orbit/record-arrays/record-array', 'ember-orbit/links/link-proxy-mixin'], function (exports, RecordArray, LinkProxyMixin) {\n\n  'use strict';\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var forEach = Ember.EnumerableUtils.forEach;\n\n  /**\n   A `HasManyArray` is a `RecordArray` that represents the contents of a has-many\n   relationship.\n\n   @class HasManyArray\n   @namespace EO\n   @extends EO.RecordArray\n   */\n  var HasManyArray = RecordArray['default'].extend(LinkProxyMixin['default'], {\n\n    arrayContentWillChange: function(index, removed, added) {\n      var store = get(this, 'store');\n      var ownerType = get(this, '_ownerType');\n      var ownerId = get(this, '_ownerId');\n      var linkField = get(this, '_linkField');\n      var content = get(this, 'content');\n      var record, recordId;\n\n      for (var i = index; i < index + removed; i++) {\n        record = content.objectAt(i);\n        recordId = record.primaryId;\n        store.removeLink(ownerType, ownerId, linkField, recordId);\n      }\n\n      return this._super.apply(this, arguments);\n    },\n\n    arrayContentDidChange: function(index, removed, added) {\n      this._super.apply(this, arguments);\n\n      var store = get(this, 'store');\n      var ownerType = get(this, '_ownerType');\n      var ownerId = get(this, '_ownerId');\n      var linkField = get(this, '_linkField');\n      var content = get(this, 'content');\n      var record, recordId;\n\n      for (var i = index; i < index + added; i++) {\n        record = content.objectAt(i);\n        recordId = record.primaryId;\n        store.addLink(ownerType, ownerId, linkField, recordId);\n      }\n    }\n\n  });\n\n  exports['default'] = HasManyArray;\n\n});","define('ember-orbit/links/has-one-object', ['exports', 'ember-orbit/links/link-proxy-mixin'], function (exports, LinkProxyMixin) {\n\n\t'use strict';\n\n\tvar HasOneObject = Ember.ObjectProxy.extend(LinkProxyMixin['default']);\n\n\texports['default'] = HasOneObject;\n\n});","define('ember-orbit/links/link-proxy-mixin', ['exports'], function (exports) {\n\n  'use strict';\n\n  /**\n   @module ember-orbit\n   */\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var LinkProxyMixin = Ember.Mixin.create({\n    store: null,\n\n    _ownerId: null,\n\n    _ownerType: null,\n\n    _linkField: null,\n\n    reload: function() {\n      var store = get(this, 'store');\n      var promise = store.findLinked.call(store,\n        get(this, '_ownerType'),\n        get(this, '_ownerId'),\n        get(this, '_linkField')\n      );\n      return promise;\n    }\n  });\n\n  exports['default'] = LinkProxyMixin;\n\n});","define('ember-orbit/main', ['exports'], function (exports) {\n\n\t'use strict';\n\n\t/**\n\t @module ember-orbit\n\t */\n\n\tvar EO = {};\n\n\texports['default'] = EO;\n\n});","define('ember-orbit/model', ['exports', 'ember-orbit/links/has-one-object', 'ember-orbit/links/has-many-array', 'ember-orbit/fields/key', 'orbit/lib/uuid'], function (exports, HasOneObject, HasManyArray, key, uuid) {\n\n  'use strict';\n\n  var get = Ember.get;\n  var set = Ember.set;\n\n  /**\n   @class Model\n   @namespace EO\n   */\n  var Model = Ember.Object.extend(Ember.Evented, {\n    primaryId: null,\n\n    getKey: function(field) {\n      var store = get(this, 'store');\n      var pk = this.constructor.primaryKey;\n\n      if (pk === field) {\n        return this.primaryId;\n      } else {\n        var type = this.constructor.typeKey;\n        return store.retrieveKey(type, this.primaryId, field);\n      }\n    },\n\n    getAttribute: function(field) {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n      var id = get(this, 'primaryId');\n\n      return store.retrieveAttribute(type, id, field);\n    },\n\n    getLink: function(field) {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n      var id = get(this, 'primaryId');\n\n      var relatedRecord = store.retrieveLink(type, id, field) || null;\n\n      var hasOneObject = HasOneObject['default'].create({\n        content: relatedRecord,\n        store: store,\n        _ownerId: id,\n        _ownerType: type,\n        _linkField: field\n      });\n\n      this._assignLink(field, hasOneObject);\n\n      return hasOneObject;\n    },\n\n    getLinks: function(field) {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n      var id = get(this, 'primaryId');\n\n      var relatedRecords = store.retrieveLinks(type, id, field) || Ember.A();\n\n      var hasManyArray = HasManyArray['default'].create({\n        content: relatedRecords,\n        store: this.store,\n        _ownerId: id,\n        _ownerType: type,\n        _linkField: field\n      });\n\n      this._assignLink(field, hasManyArray);\n\n      return hasManyArray;\n    },\n\n    patch: function(field, value) {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n\n      return store.patch(type, this.primaryId, field, value);\n    },\n\n    addLink: function(field, relatedRecord) {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n      var relatedId = relatedRecord ? relatedRecord.primaryId : null;\n\n      return store.addLink(type, this.primaryId, field, relatedId);\n    },\n\n    removeLink: function(field, relatedRecord) {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n      var relatedId = relatedRecord ? relatedRecord.primaryId : null;\n\n      return store.removeLink(type, this.primaryId, field, relatedId);\n    },\n\n    remove: function() {\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n\n      return store.remove(type, this.primaryId);\n    },\n\n    willDestroy: function() {\n      this.trigger('didUnload');\n      this._super();\n\n      var store = get(this, 'store');\n      var type = this.constructor.typeKey;\n\n      store.unload(type, this.primaryId);\n    },\n\n    _assignLink: function(field, value) {\n      this._links = this._links || {};\n      this._links[field] = value;\n    }\n  });\n\n  var _create = Model.create;\n\n  Model.reopenClass({\n    _create: function(store, id) {\n      var record = _create.call(this, {store: store});\n      set(record, 'primaryId', id);\n      return record;\n    },\n\n    create: function() {\n      throw new Ember.Error(\"You should not call `create` on a model. Instead, call `store.add` with the attributes you would like to set.\");\n    },\n\n    primaryKey: Ember.computed('keys', function() {\n      if (arguments.length > 1) {\n        throw new Ember.Error(\"You should not set `primaryKey` on a model. Instead, define a `key` with the options `{primaryKey: true, defaultValue: idGenerator}`.\");\n      }\n\n      var keys = get(this, 'keys');\n      var keyNames = Object.keys(keys);\n      for (var k in keyNames) {\n        var keyName = keyNames[k];\n        if (keys[keyName].primaryKey) {\n          return keyName;\n        }\n      }\n    }),\n\n    keys: Ember.computed(function() {\n      var map = {};\n      var _this = this;\n      var primaryKey;\n\n      _this.eachComputedProperty(function(name, meta) {\n        if (meta.isKey) {\n          meta.name = name;\n          map[name] = meta.options;\n          if (meta.options.primaryKey) {\n            primaryKey = name;\n          }\n        }\n      });\n\n      // Set a single primary key named `id` if no other has been defined\n      if (!primaryKey) {\n        primaryKey = 'id';\n\n        var options = {primaryKey: true, defaultValue: uuid.uuid};\n        this.reopen({id: key['default'](options)});\n        map.id = options;\n      }\n\n      return map;\n    }),\n\n    attributes: Ember.computed(function() {\n      var map = {};\n\n      this.eachComputedProperty(function(name, meta) {\n        if (meta.isAttribute) {\n          meta.name = name;\n          map[name] = meta.options;\n        }\n      });\n\n      return map;\n    }),\n\n    links: Ember.computed(function() {\n      var map = {};\n\n      this.eachComputedProperty(function(name, meta) {\n        if (meta.isLink) {\n          meta.name = name;\n          map[name] = meta.options;\n        }\n      });\n\n      return map;\n    })\n  });\n\n  exports['default'] = Model;\n\n});","define('ember-orbit/record-array-manager', ['exports', 'ember-orbit/record-arrays/record-array', 'ember-orbit/record-arrays/filtered-record-array'], function (exports, RecordArray, FilteredRecordArray) {\n\n  'use strict';\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var forEach = Ember.EnumerableUtils.forEach;\n\n  /**\n   @class RecordArrayManager\n   @namespace EO\n   @private\n   @extends Ember.Object\n   */\n  var RecordArrayManager = Ember.Object.extend({\n    init: function() {\n      this.filteredRecordArrays = Ember.MapWithDefault.create({\n        defaultValue: function() { return []; }\n      });\n\n      this.changes = [];\n    },\n\n    recordDidChange: function(record, operation) {\n      if (this.changes.push({record: record, operation: operation}) !== 1) { return; }\n      Ember.run.schedule('actions', this, this._processChanges);\n    },\n\n    /**\n     @method _processChanges\n     @private\n     */\n    _processChanges: function() {\n      var change;\n\n      while (change = this.changes.shift()) {\n        this._processChange(change.record, change.operation);\n      }\n    },\n\n    _processChange: function(record, operation) {\n  //    console.log('_processChange', record, operation);\n\n      var path = operation.path,\n          op = operation.op,\n          value = operation.value;\n\n      if (path.length === 2) {\n        if (op === 'add') {\n          this._recordWasChanged(record);\n          return;\n\n        } else if (op === 'remove') {\n          this._recordWasDeleted(record);\n          return;\n        }\n\n      } else if (path.length === 3 || path.length === 4) {\n        this._recordWasChanged(record);\n        return;\n\n      } else if (path.length === 5) {\n        if (op === 'add') {\n          this._linkWasAdded(record, path[3], path[4]);\n          return;\n\n        } else if (op === 'remove') {\n          this._linkWasRemoved(record, path[3], path[4]);\n          return;\n        }\n      }\n\n      console.log('!!!! unhandled change', path.length, operation);\n    },\n\n    _recordWasDeleted: function(record) {\n      var recordArrays = record._recordArrays;\n\n      if (recordArrays) {\n        recordArrays = recordArrays.toArray();\n\n        forEach(recordArrays, function(array) {\n          array.removeObject(record);\n        });\n      }\n\n      record.destroy();\n    },\n\n    _recordWasChanged: function(record) {\n      var type = record.constructor.typeKey,\n          recordArrays = this.filteredRecordArrays.get(type),\n          filter;\n\n      if (recordArrays) {\n        forEach(recordArrays, function(array) {\n          filter = get(array, 'filterFunction');\n          this.updateRecordArray(array, filter, type, record);\n        }, this);\n      }\n    },\n\n    _linkWasAdded: function(record, key, value) {\n      var type = record.constructor.typeKey;\n      var store = get(this, 'store');\n      var linkType = get(store, 'schema').linkProperties(type, key).model;\n\n      if (linkType) {\n        var relatedRecord = store.retrieve(linkType, value);\n        var links = get(record, key);\n\n        if (links && relatedRecord) {\n          links.addObject(relatedRecord);\n        }\n      }\n    },\n\n    _linkWasRemoved: function(record, key, value) {\n      var type = record.constructor.typeKey;\n      var store = get(this, 'store');\n      var linkType = get(store, 'schema').linkProperties(type, key).model;\n\n      if (linkType) {\n        var relatedRecord = store.retrieve(linkType, value);\n        var links = get(record, key);\n\n        if (links && relatedRecord) {\n          links.removeObject(relatedRecord);\n        }\n      }\n    },\n\n    /**\n     @method updateRecordArray\n     @param {EO.RecordArray} array\n     @param {Function} filter\n     @param {String} type\n     @param {EO.Model} record\n     */\n    updateRecordArray: function(array, filter, type, record) {\n      var shouldBeInArray;\n\n      if (!filter) {\n        shouldBeInArray = true;\n      } else {\n        shouldBeInArray = filter(record);\n      }\n\n      if (shouldBeInArray) {\n        array.addObject(record);\n      } else {\n        array.removeObject(record);\n      }\n    },\n\n    /**\n     @method updateFilter\n     @param array\n     @param type\n     @param filter\n     */\n    updateFilter: function(array, type, filter) {\n      var records = this.store.retrieve(type),\n          record;\n\n      for (var i=0, l=records.length; i<l; i++) {\n        record = records[i];\n\n        if (!get(record, 'isDeleted')) {\n          this.updateRecordArray(array, filter, type, record);\n        }\n      }\n    },\n\n    /**\n     @method createRecordArray\n     @param {String} type\n     @return {EO.RecordArray}\n     */\n    createRecordArray: function(type) {\n      var array = RecordArray['default'].create({\n        type: type,\n        content: Ember.A(),\n        store: this.store\n      });\n\n      this.registerFilteredRecordArray(array, type);\n\n      return array;\n    },\n\n    /**\n     @method createFilteredRecordArray\n     @param {Class} type\n     @param {Function} filter\n     @param {Object} query (optional)\n     @return {EO.FilteredRecordArray}\n     */\n    createFilteredRecordArray: function(type, filter, query) {\n      var array = FilteredRecordArray['default'].create({\n        query: query,\n        type: type,\n        content: Ember.A(),\n        store: this.store,\n        manager: this,\n        filterFunction: filter\n      });\n\n      this.registerFilteredRecordArray(array, type, filter);\n\n      return array;\n    },\n\n    /**\n     @method registerFilteredRecordArray\n     @param {EO.RecordArray} array\n     @param {Class} type\n     @param {Function} filter\n     */\n    registerFilteredRecordArray: function(array, type, filter) {\n      var recordArrays = this.filteredRecordArrays.get(type);\n      recordArrays.push(array);\n\n      this.updateFilter(array, type, filter);\n    },\n\n    willDestroy: function(){\n      this._super();\n\n      var filteredRecordArraysValues = [];\n      this.filteredRecordArrays.forEach(function(value) {\n        filteredRecordArraysValues.push(value);\n      });\n\n      flatten(values(filteredRecordArraysValues)).forEach(destroy);\n    }\n  });\n\n  function values(obj) {\n    var result = [];\n    var keys = Ember.keys(obj);\n\n    for (var i = 0; i < keys.length; i++) {\n      result.push(obj[keys[i]]);\n    }\n    return result;\n  }\n\n  function destroy(entry) {\n    entry.destroy();\n  }\n\n  function flatten(list) {\n    var length = list.length;\n    var result = Ember.A();\n\n    for (var i = 0; i < length; i++) {\n      result = result.concat(list[i]);\n    }\n\n    return result;\n  }\n\n  exports['default'] = RecordArrayManager;\n\n});","define('ember-orbit/record-arrays/filtered-record-array', ['exports', 'ember-orbit/record-arrays/record-array'], function (exports, RecordArray) {\n\n  'use strict';\n\n  var get = Ember.get;\n\n  /**\n   @class FilteredRecordArray\n   @namespace EO\n   @extends EO.RecordArray\n   */\n  var FilteredRecordArray = RecordArray['default'].extend({\n    /**\n     @method filterFunction\n     @param {EO.Model} record\n     @return {Boolean} `true` if the record should be in the array\n     */\n    filterFunction: null,\n\n    replace: function() {\n      var type = get(this, 'type').toString();\n      throw new Error(\"The result of a client-side filter (on \" + type + \") is immutable.\");\n    },\n\n    /**\n     @method updateFilter\n     @private\n     */\n    _updateFilter: function() {\n      var manager = get(this, 'manager');\n      manager.updateFilter(this, get(this, 'type'), get(this, 'filterFunction'));\n    },\n\n    updateFilter: Ember.observer(function() {\n      Ember.run.once(this, this._updateFilter);\n    }, 'filterFunction')\n  });\n\n  exports['default'] = FilteredRecordArray;\n\n});","define('ember-orbit/record-arrays/record-array', ['exports'], function (exports) {\n\n  'use strict';\n\n  /**\n   @module ember-orbit\n   */\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var forEach = Ember.EnumerableUtils.forEach;\n\n  /**\n   @class RecordArray\n   @namespace EO\n   @extends Ember.ArrayProxy\n   @uses Ember.Evented\n   */\n\n  var RecordArray = Ember.ArrayProxy.extend(Ember.Evented, {\n    init: function() {\n      this._super();\n      this._recordsAdded(get(this, 'content'));\n    },\n\n    willDestroy: function() {\n      this._recordsRemoved(get(this, 'content'));\n      this._super();\n    },\n\n    /**\n     The model type contained by this record array.\n\n     @property type\n     @type String\n     */\n    type: null,\n\n    /**\n     The store that created this record array.\n\n     @property store\n     @type EO.Store\n     */\n    store: null,\n\n    /**\n     Adds a record to the `RecordArray`.\n\n     @method addObject\n     @param {EO.Model} record\n     */\n    addObject: function(record) {\n      get(this, 'content').addObject(record);\n      this._recordAdded(record);\n    },\n\n    /**\n     Removes a record from the `RecordArray`.\n\n     @method removeObject\n     @param {EO.Model} record\n     */\n    removeObject: function(record) {\n      get(this, 'content').removeObject(record);\n      this._recordRemoved(record);\n    },\n\n    _recordAdded: function(record) {\n      this._recordArraysForRecord(record).add(this);\n    },\n\n    _recordRemoved: function(record) {\n      this._recordArraysForRecord(record).delete(this);\n    },\n\n    _recordsAdded: function(records) {\n      forEach(records, function(record) {\n        this._recordAdded(record);\n      }, this);\n    },\n\n    _recordsRemoved: function(records) {\n      forEach(records, function(record) {\n        this._recordRemoved(record);\n      }, this);\n    },\n\n    _recordArraysForRecord: function(record) {\n      record._recordArrays = record._recordArrays || Ember.OrderedSet.create();\n      return record._recordArrays;\n    }\n  });\n\n  exports['default'] = RecordArray;\n\n});","define('ember-orbit/schema', ['exports', 'orbit-common/schema', 'ember-orbit/fields/key', 'orbit/lib/uuid'], function (exports, OrbitSchema, fields__key, uuid) {\n\n  'use strict';\n\n  var get = Ember.get;\n\n  var proxyProperty = function(source, property, defaultValue) {\n    var _property = '_' + property;\n\n    return function(key, value) {\n      if (arguments.length > 1) {\n        this[_property] = value;\n        if (this[source]) {\n          this[source][property] = value;\n        }\n      }\n      if (!this[_property]) {\n        this[_property] = defaultValue;\n      }\n      return this[_property];\n    }.property();\n  };\n\n  var Schema = Ember.Object.extend({\n    /**\n     @property pluralize\n     @type {function}\n     @default OC.Schema.pluralize\n     */\n    pluralize: proxyProperty('_schema', 'pluralize'),\n\n    /**\n     @property singularize\n     @type {function}\n     @default OC.Schema.singularize\n     */\n    singularize: proxyProperty('_schema', 'singularize'),\n\n    init: function() {\n      this._super.apply(this, arguments);\n      this._modelTypeMap = {};\n\n      // Don't use `modelDefaults` in ember-orbit.\n      // The same functionality can be achieved with a base model class that\n      // can be overridden.\n      var options = {\n        modelDefaults: {}\n      };\n\n      var pluralize = this.get('pluralize');\n      if (pluralize) {\n        options.pluralize = pluralize;\n      }\n\n      var singularize = this.get('singularize');\n      if (singularize) {\n        options.singularize = singularize;\n      }\n\n      this._schema = new OrbitSchema['default'](options);\n    },\n\n    defineModel: function(type, modelClass) {\n      var definedModels = this._schema.models;\n      if (!definedModels[type]) {\n        this._schema.registerModel(type, {\n          keys: get(modelClass, 'keys'),\n          attributes: get(modelClass, 'attributes'),\n          links: get(modelClass, 'links')\n        });\n      }\n    },\n\n    modelFor: function(type) {\n      Ember.assert(\"`type` must be a string\", typeof type === 'string');\n\n      var model = this._modelTypeMap[type];\n      if (!model) {\n        model = this.container.lookupFactory('model:' + type);\n        if (!model) {\n          throw new Ember.Error(\"No model was found for '\" + type + \"'\");\n        }\n        model.typeKey = type;\n\n        // ensure model is defined in underlying OC.Schema\n        this.defineModel(type, model);\n\n        // save model in map for faster lookups\n        this._modelTypeMap[type] = model;\n\n        // look up related models\n        this.links(type).forEach(function(link) {\n          this.modelFor(this.linkProperties(type, link).model);\n        }, this);\n      }\n\n      return model;\n    },\n\n    models: function() {\n      return Object.keys(this._schema.models);\n    },\n\n    primaryKey: function(type) {\n      return this._schema.models[type].primaryKey.name;\n    },\n\n    primaryKeyProperties: function(type, name) {\n      return this._schema.models[type].primaryKey;\n    },\n\n    keys: function(type) {\n      return Object.keys(this._schema.models[type].keys);\n    },\n\n    keyProperties: function(type, name) {\n      return this._schema.models[type].keys[name];\n    },\n\n    attributes: function(type) {\n      return Object.keys(this._schema.models[type].attributes);\n    },\n\n    attributeProperties: function(type, name) {\n      return this._schema.models[type].attributes[name];\n    },\n\n    links: function(type) {\n      return Object.keys(this._schema.models[type].links);\n    },\n\n    linkProperties: function(type, name) {\n      return this._schema.models[type].links[name];\n    },\n\n    normalize: function(type, record) {\n      // Normalize links to IDs contained within the `__rel` (i.e. \"forward link\")\n      // element.\n      this.links(type).forEach(function(link) {\n        if (!record.__rel) {\n          record.__rel = {};\n        }\n\n        var linkValue = record[link];\n        if (linkValue) {\n          if (Ember.isArray(linkValue)) {\n            var rel = record.__rel[link] = {};\n            linkValue.forEach(function(id) {\n              if (typeof id === 'object') {\n                id = get(id, 'primaryId');\n              }\n              rel[id] = true;\n            });\n\n          } else if (typeof linkValue === 'object') {\n            record.__rel[link] = get(linkValue, 'primaryId');\n\n          } else {\n            record.__rel[link] = linkValue;\n          }\n\n          delete record[link];\n        }\n      });\n\n      this._schema.normalize(type, record);\n    }\n  });\n\n  exports['default'] = Schema;\n\n});","define('ember-orbit/source', ['exports', 'ember-orbit/schema', 'orbit-common/source'], function (exports, Schema, OCSource) {\n\n  'use strict';\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var Source = Ember.Object.extend({\n    orbitSourceClass: null,\n    orbitSourceOptions: null,\n    schema: null,\n\n    /**\n     @method init\n     @private\n     */\n    init: function() {\n      this._super.apply(this, arguments);\n\n      var OrbitSourceClass = get(this, 'orbitSourceClass');\n\n      // If `orbitSourceClass` is obtained through the _super chain, dereference\n      // its wrapped function, which will be the constructor.\n      //\n      // Note: This is only necessary when retrieving a *constructor* from an Ember\n      //       class hierarchy. Otherwise, `superWrapper` \"just works\".\n      if (OrbitSourceClass && OrbitSourceClass.wrappedFunction) {\n        OrbitSourceClass = OrbitSourceClass.wrappedFunction;\n      }\n\n      var schema = get(this, 'schema');\n      if (!schema) {\n        var container = get(this, 'container');\n        schema = container.lookup('schema:main');\n        set(this, 'schema', schema);\n      }\n\n      var orbitSourceSchema = get(schema, '_schema');\n      var orbitSourceOptions = get(this, 'orbitSourceOptions');\n      this.orbitSource = new OrbitSourceClass(orbitSourceSchema, orbitSourceOptions);\n\n      Ember.assert(\"orbitSource must be an instance of an `OC.Source`\",\n        this.orbitSource instanceof OCSource['default']);\n    }\n  });\n\n  exports['default'] = Source;\n\n});","define('ember-orbit/store', ['exports', 'ember-orbit/source', 'ember-orbit/model', 'ember-orbit/record-array-manager', 'orbit-common/memory-source'], function (exports, Source, Model, RecordArrayManager, OCMemorySource) {\n\n  'use strict';\n\n  var get = Ember.get,\n      set = Ember.set;\n\n  var RSVP = Ember.RSVP;\n\n  var PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin);\n  function promiseArray(promise, label) {\n    return PromiseArray.create({\n      promise: RSVP.Promise.cast(promise, label)\n    });\n  }\n\n  var Store = Source['default'].extend({\n    orbitSourceClass: OCMemorySource['default'],\n    schema: null,\n\n    init: function() {\n      this._super.apply(this, arguments);\n\n      this.typeMaps = {};\n\n      this.orbitSource.on('didTransform', this._didTransform, this);\n\n      this._requests = Ember.OrderedSet.create();\n\n      this._recordArrayManager = RecordArrayManager['default'].create({\n        store: this\n      });\n    },\n\n    _fireHook: function(type, event, hookArguments){\n      var observer = this.container.lookup(\"observer:\" + type);\n      if(observer) observer.trigger.apply(observer, [event].concat(hookArguments));\n    },\n\n    then: function(success, failure) {\n      return this.settleRequests().then(success, failure);\n    },\n\n    settleRequests: function() {\n      return Ember.RSVP.all(this._requests.toArray());\n    },\n\n    settleTransforms: function() {\n      return this.orbitSource.settleTransforms();\n    },\n\n    willDestroy: function() {\n      this.orbitSource.off('didTransform', this.didTransform, this);\n      this._recordArrayManager.destroy();\n      this._super.apply(this, arguments);\n    },\n\n    typeMapFor: function(type) {\n      var typeMap = this.typeMaps[type];\n\n      if (typeMap) return typeMap;\n\n      typeMap = {\n        records: {},\n        type: type\n      };\n\n      this.typeMaps[type] = typeMap;\n\n      return typeMap;\n    },\n\n    transform: function(operation) {\n      return this.orbitSource.transform(operation);\n    },\n\n    all: function(type) {\n      this._verifyType(type);\n\n      var typeMap = this.typeMapFor(type),\n          findAllCache = typeMap.findAllCache;\n\n      if (findAllCache) { return findAllCache; }\n\n      var array = this._recordArrayManager.createRecordArray(type);\n\n      typeMap.findAllCache = array;\n      return array;\n    },\n\n    filter: function(type, query, filter) {\n      this._verifyType(type);\n\n      var length = arguments.length;\n      var hasQuery = length === 3;\n      var promise;\n      var array;\n\n      if (hasQuery) {\n        promise = this.find(type, query);\n      } else if (length === 2) {\n        filter = query;\n      }\n\n      if (hasQuery) {\n        array = this._recordArrayManager.createFilteredRecordArray(type, filter, query);\n      } else {\n        array = this._recordArrayManager.createFilteredRecordArray(type, filter);\n      }\n\n      promise = promise || RSVP.Promise.cast(array);\n\n      return promiseArray(promise.then(function() {\n        return array;\n      }, null, \"OE: Store#filter of \" + type));\n    },\n\n    find: function(type, id, options) {\n      var _this = this;\n      this._verifyType(type);\n\n      var promise = this.orbitSource.find(type, id, options).then(function(data) {\n        return _this._lookupFromData(type, data);\n      });\n\n      return this._request(promise);\n    },\n\n    add: function(type, properties) {\n      var _this = this;\n      this._verifyType(type);\n      properties = properties || {};\n\n      get(this, 'schema').normalize(type, properties);\n      var promise = this.orbitSource.add(type, properties).then(function(data) {\n        return _this._lookupFromData(type, data);\n      });\n\n      return this._request(promise).then(function(record){\n        _this._fireHook(type, 'afterAddRecord', [record]);\n        return record;\n      });\n    },\n\n    remove: function(type, id) {\n      var _this = this;\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var record = this._lookupRecord(type, id);\n      var promise = this.orbitSource.remove(type, id);\n\n      return this._request(promise).then(function(){\n        _this._fireHook(type, 'afterRemoveRecord', [record]);\n      });\n    },\n\n    patch: function(type, id, field, value) {\n      var _this = this;\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var promise = this.orbitSource.patch(type, id, field, value);\n\n      return this._request(promise).then(function(){\n        var record = _this._lookupRecord(type, id);\n        _this._fireHook(type, 'afterPatchRecord', [record, field, value]);\n      });\n    },\n\n    addLink: function(type, id, field, relatedId) {\n      var _this = this;\n      this._verifyType(type);\n      id = this._normalizeId(id);\n      relatedId = this._normalizeId(relatedId);\n\n      var promise = this.orbitSource.addLink(type, id, field, relatedId);\n\n      return this._request(promise).then(function(){\n        var record = _this._lookupRecord(type, id);\n        var linkType = _this.schema.linkProperties(type, field).model;\n        var value = _this._lookupRecord(linkType, relatedId);\n        _this._fireHook(type, 'afterAddLink', [record, field, value]);\n      });\n    },\n\n    removeLink: function(type, id, field, relatedId) {\n      var _this = this;\n      this._verifyType(type);\n      id = this._normalizeId(id);\n      relatedId = this._normalizeId(relatedId);\n\n      var promise = this.orbitSource.removeLink(type, id, field, relatedId);\n\n      return this._request(promise).then(function(){\n        var record = _this._lookupRecord(type, id);\n        var linkType = _this.schema.linkProperties(type, field).model;\n        var value = _this._lookupRecord(linkType, relatedId);\n        _this._fireHook(type, 'afterRemoveLink', [record, field, value]);\n      });\n    },\n\n    findLink: function(type, id, field) {\n      var _this = this;\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var linkType = get(this, 'schema').linkProperties(type, field).model;\n      this._verifyType(linkType);\n\n      var promise = this.orbitSource.findLink(type, id, field).then(function(data) {\n        return _this._lookupFromData(linkType, data);\n      });\n\n      return this._request(promise);\n    },\n\n    findLinked: function(type, id, field, options) {\n      var _this = this;\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var linkType = get(this, 'schema').linkProperties(type, field).model;\n      this._verifyType(linkType);\n\n      var promise = this.orbitSource.findLinked(type, id, field, options).then(function(data) {\n        return _this._lookupFromData(linkType, data);\n      });\n\n      return this._request(promise);\n    },\n\n    retrieve: function(type, id) {\n      this._verifyType(type);\n\n      var ids;\n      if (arguments.length === 1) {\n        ids = Object.keys(this.orbitSource.retrieve([type]));\n\n      } else if (Ember.isArray(id)) {\n        ids = id;\n      }\n\n      if (ids) {\n        return this._lookupRecords(type, ids);\n\n      } else {\n        id = this._normalizeId(id);\n\n        if (this.orbitSource.retrieve([type, id])) {\n          return this._lookupRecord(type, id);\n        }\n      }\n    },\n\n    retrieveKey: function(type, id, field) {\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      return this.orbitSource.retrieve([type, id, field]);\n    },\n\n    retrieveAttribute: function(type, id, field) {\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      return this.orbitSource.retrieve([type, id, field]);\n    },\n\n    retrieveLink: function(type, id, field) {\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var linkType = get(this, 'schema').linkProperties(type, field).model;\n      this._verifyType(linkType);\n\n      var relatedId = this.orbitSource.retrieve([type, id, '__rel', field]);\n\n      if (linkType && relatedId) {\n        return this.retrieve(linkType, relatedId);\n      }\n    },\n\n    retrieveLinks: function(type, id, field) {\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var linkType = get(this, 'schema').linkProperties(type, field).model;\n      this._verifyType(linkType);\n\n      var links = this.orbitSource.retrieve([type, id, '__rel', field]);\n      if(links === undefined) throw new Error(\"Link \" + [type,id,field].join(\"/\") + \" is not loaded. Add it to your includes e.g. find('\" + type + \"', '\" + id + \"', {include: ['\" + field + \"']})\");\n      var relatedIds = Object.keys(links);\n\n      if (linkType && Ember.isArray(relatedIds) && relatedIds.length > 0) {\n        return this.retrieve(linkType, relatedIds);\n      }\n    },\n\n    unload: function(type, id) {\n      this._verifyType(type);\n      id = this._normalizeId(id);\n\n      var typeMap = this.typeMapFor(type);\n      delete typeMap.records[id];\n    },\n\n    _verifyType: function(type) {\n      Ember.assert(\"`type` must be registered as a model in the container\", get(this, 'schema').modelFor(type));\n    },\n\n    _didTransform: function(operation, inverse) {\n     // console.log('_didTransform', operation.serialize());\n\n      var op = operation.op,\n          path = operation.path,\n          value = operation.value,\n          record = this._lookupRecord(path[0], path[1]);\n\n      if (path.length === 3) {\n        // attribute changed\n        record.propertyDidChange(path[2]);\n\n      } else if (path.length === 4) {\n        // hasOne link changed\n        var linkName = path[3];\n        var linkValue = this.retrieveLink(path[0], path[1], linkName);\n        record.set(linkName, linkValue);\n      }\n\n      // trigger record array changes\n      this._recordArrayManager.recordDidChange(record, operation);\n    },\n\n    _lookupRecord: function(type, id) {\n      var typeMap = this.typeMapFor(type);\n      id = this._normalizeId(id);\n\n      var record = typeMap.records[id];\n\n      if (record === undefined) {\n        var model = get(this, 'schema').modelFor(type);\n\n        record = model._create(this, id);\n\n        typeMap.records[id] = record;\n      }\n\n      return record;\n    },\n\n    _lookupRecords: function(type, ids) {\n      var _this = this;\n      return ids.map(function(id) {\n        return _this._lookupRecord(type, id);\n      });\n    },\n\n    _lookupFromData: function(type, data) {\n      if (Ember.isNone(data)) {\n        return null;\n      }\n\n      var pk = get(this, 'schema').primaryKey(type);\n      if (Ember.isArray(data)) {\n        var ids = data.map(function(recordData) {\n          return recordData[pk];\n        });\n        return this._lookupRecords(type, ids);\n      } else {\n        return this._lookupRecord(type, data[pk]);\n      }\n    },\n\n    _request: function(promise) {\n      var requests = this._requests;\n      requests.add(promise);\n      return promise.finally(function() {\n        requests.delete(promise);\n      });\n    },\n\n    _normalizeId: function(id) {\n      if (id !== null && typeof id === 'object') {\n        return id.primaryId;\n      } else {\n        return id;\n      }\n    }\n  });\n\n  exports['default'] = Store;\n\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"ember-orbit.amd.js"}